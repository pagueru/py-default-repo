[project]
name = "py-default-repo"
version = "0.1.0"
description = ""
authors = [
    { name = "Raphael Coelho", email = "raphael.phael@gmail.com" }
]
readme = "README.md"
requires-python = ">=3.12,<4.0"

dependencies = [
    "PyYaml==6.0.1",
]

[tool.poetry]
requires-poetry = ">=2.0.1"

[tool.poetry.group.dev.dependencies]
ruff = "^0.11.0"
pytest = "^8.3.4"
pre-commit = "^4.0.1"
types-pyyaml = "^6.0.12.20241230"
pytest-cov = "^6.0.0"
mypy = "^1.15.0"


[tool.ruff]
lint.select = ["ALL"]    # Ativar todas as regras de linting, análise e estilo
fix = true               # Ativar correções automáticas
lint.unfixable = []      # Permitir todas as correções
line-length = 100        # Definir o comprimento da linha para 100 caracteres
target-version = "py312" # Compatível com Python 3.12
lint.ignore = [
    "D203",    # one-blank-line-before-class (conflita com D211)
    "D212",    # multi-line-summary-first-line (conflita com D213)
    "COM812",  # trailing-comma-missing (conflita com o formatador)
    "ISC001",  # single-line-implicit-string-concatenation (já corrigido pelo formatador)
    "G004",    # no-else-return (já corrigido pelo formatador)
    "S101",    # no-else-raise (Permite o uso de `assert`)
    "PERF401"
]

# Ordenação automática de imports (substitui o isort)
lint.isort.force-sort-within-sections = true # Forçar a ordenação dentro de seções
lint.isort.combine-as-imports = true         # Permitir importações combinadas

[tool.ruff.format]
quote-style = "double"            # Usar aspas duplas (Black)
indent-style = "space"            # Indentação com espaços (Black)
skip-magic-trailing-comma = false # Manter vírgula mágica (Black)
line-ending = "auto"              # Detectar automaticamente o tipo de quebra de linha (Black)

[tool.ruff.lint.pydocstyle]
convention = "google"           # Exigir docstrings ("numpy" ou "pep257")

[tool.ruff.lint.flake8-annotations]
mypy-init-return = true         # Exigir anotações de tipo em __init__ e __new__
suppress-none-returning = false # Não suprimir erros de retorno None
allow-star-arg-any = false      # Não permitir *args e **kwargs sem anotações de tipo

[tool.mypy]
strict = true                   # Ativa as verificações estritas

[tool.pytest.ini_options]
pythonpath = ["."]              # Adiciona o diretório atual ao PYTHONPATH

# Adiciona opções padrão para o pytest
addopts = [
    "--junit-xml=tests/htmlcov/report.xml",     # Gera o relatório de teste em XML
    "--no-cov-on-fail",                         # Desabilita a cobertura se os testes falharem
    "--cov-report=term-missing:skip-covered",   # Mostra os arquivos com cobertura de código
    "--cov-fail-under=80"                       # Falha se a cobertura de código for menor que 80%
]


[project.urls]
repository = "https://github.com/pagueru/py-default-repo"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
